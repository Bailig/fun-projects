{"version":3,"sources":["../../paint-clone/src/app-bar.styled.tsx","../../paint-clone/src/app-bar.tsx","../../paint-clone/src/paint-clone.styled.tsx","../../paint-clone/src/paint-clone-container.tsx","../../paint-clone/src/index.tsx"],"names":[],"mappings":"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","file":"src.190d82b0.js","sourceRoot":"../public","sourcesContent":["import styled from \"styled-components\";\n\nexport const appBarVariables = {\n  height: 56,\n};\n\nexport const AppBarRoot = styled.header`\n  height: ${appBarVariables.height}px;\n`;\n","import React, { FC } from \"react\";\nimport { AppBarRoot } from \"./app-bar.styled\";\n\nexport type ToolType = \"brush\" | \"eraser\";\n\ninterface AppBarProps {\n  activeTool: ToolType;\n  backgroundColor: string;\n  brushColor: string;\n  brushSize: number;\n  onDownload?: () => void;\n  onCacheClear?: () => void;\n  onCanvasClear?: () => void;\n  onToolSelect?: (toolType: ToolType) => void;\n  onBackgroundColorChange?: (color: string) => void;\n  onBrushColorChange?: (color: string) => void;\n  onBrushSizeChange?: (size: number) => void;\n}\n\nexport const AppBar: FC<AppBarProps> = (props) => {\n  const {\n    activeTool,\n    backgroundColor,\n    brushColor,\n    brushSize,\n    onDownload,\n    onCacheClear,\n    onCanvasClear,\n    onToolSelect = () => {},\n    onBackgroundColorChange = () => {},\n    onBrushColorChange = () => {},\n    onBrushSizeChange = () => {},\n  } = props;\n\n  return (\n    <AppBarRoot style={{ display: \"flex\" }}>\n      <div>{activeTool}</div>\n      <button type=\"button\" onClick={() => onToolSelect(\"brush\")}>\n        brush\n      </button>\n      <input\n        value={brushColor}\n        autoComplete=\"off\"\n        onChange={(e) => onBrushColorChange(e.target.value)}\n      />\n      <div>brush size</div>\n      <div>{brushSize}</div>\n      <input\n        type=\"range\"\n        min=\"1\"\n        max=\"50\"\n        value={brushSize}\n        onChange={(e) => onBrushSizeChange(parseInt(e.target.value, 10))}\n      />\n      <input\n        value={backgroundColor}\n        autoComplete=\"off\"\n        onChange={(e) => onBackgroundColorChange(e.target.value)}\n      />\n      <button\n        type=\"button\"\n        title=\"Eraser\"\n        onClick={() => onToolSelect(\"eraser\")}\n      >\n        eraser\n      </button>\n      <button type=\"button\" title=\"Clear\" onClick={onCanvasClear}>\n        clear\n      </button>\n      <button type=\"button\" title=\"Clear cache\" onClick={onCacheClear}>\n        clear cache\n      </button>\n      <button type=\"button\" title=\"Save image file\" onClick={onDownload}>\n        save image file\n      </button>\n    </AppBarRoot>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const MobileMessage = styled.h1`\n  @media screen and (min-width: 800px) {\n    display: none;\n  }\n`;\n\nexport const Canvas = styled.canvas`\n  cursor: crosshair;\n`;\n","import React, { FC, useCallback, useEffect, useRef, useState } from \"react\";\nimport { AppBar, ToolType } from \"./app-bar\";\nimport { appBarVariables } from \"./app-bar.styled\";\nimport { Canvas, MobileMessage } from \"./paint-clone.styled\";\n\ninterface StrokeBase {\n  x: number;\n  y: number;\n  size: number;\n}\n\ninterface BrushStoke extends StrokeBase {\n  color: string;\n  type: \"brush\";\n}\ninterface EraserStoke extends StrokeBase {\n  type: \"eraser\";\n}\n\ntype Stroke = BrushStoke | EraserStoke;\n\nexport const PaintCloneContainer: FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const contextRef = useRef<CanvasRenderingContext2D>();\n  const isDrawingRef = useRef<boolean>(false);\n  const drawnStokesRef = useRef<Stroke[]>([]);\n  const [backgroundColor, setBackgroundColor] = useState<string>(\"#ffffff\");\n  const [brushColor, setBrushColor] = useState<string>(\"#000000\");\n  const [brushSize, setBrushSize] = useState<number>(10);\n  const [activeTool, setActiveTool] = useState<ToolType>(\"brush\");\n\n  useEffect(() => {\n    const canvas = canvasRef.current!;\n    contextRef.current = canvas.getContext(\"2d\")!;\n  }, []);\n\n  const initCanvas = useCallback(() => {\n    const canvas = canvasRef.current!;\n    const context = contextRef.current!;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight - appBarVariables.height;\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  }, [backgroundColor]);\n\n  const restoreDrawing = useCallback(() => {\n    const context = contextRef.current!;\n    const drawnStokes = drawnStokesRef.current!;\n\n    drawnStokes.forEach((stroke, i) => {\n      if (i === 0) return;\n      context.beginPath();\n      context.moveTo(drawnStokes[i - 1].x, drawnStokes[i - 1].y);\n      context.lineWidth = stroke.size;\n      context.lineCap = \"round\";\n      if (stroke.type === \"eraser\") {\n        context.strokeStyle = backgroundColor;\n      } else {\n        context.strokeStyle = stroke.color;\n      }\n      context.lineTo(stroke.x, stroke.y);\n      context.stroke();\n    });\n  }, [backgroundColor]);\n\n  useEffect(() => {\n    initCanvas();\n    restoreDrawing();\n  }, [initCanvas, restoreDrawing]);\n\n  const getMousePosition = (\n    event: React.MouseEvent<HTMLCanvasElement, MouseEvent>,\n  ) => {\n    const boundaries = canvasRef.current!.getBoundingClientRect();\n    return {\n      x: event.clientX - boundaries.left,\n      y: event.clientY - boundaries.top,\n    };\n  };\n\n  const handleMouseDown = (\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>,\n  ) => {\n    isDrawingRef.current = true;\n    const context = contextRef.current!;\n    const curserPosition = getMousePosition(e);\n    context.moveTo(curserPosition.x, curserPosition.y);\n    context.beginPath();\n    context.lineCap = \"round\";\n    if (activeTool === \"eraser\") {\n      context.strokeStyle = backgroundColor;\n      context.lineWidth = 50;\n    } else {\n      context.strokeStyle = brushColor;\n      context.lineWidth = brushSize;\n    }\n  };\n\n  const handleMouseMove = (\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>,\n  ) => {\n    if (!isDrawingRef.current) return;\n    const context = contextRef.current!;\n\n    const currentPosition = getMousePosition(e);\n    context.lineTo(currentPosition.x, currentPosition.y);\n    context.stroke();\n    const stroke =\n      activeTool === \"brush\"\n        ? {\n            x: currentPosition.x,\n            y: currentPosition.y,\n            size: brushSize,\n            color: brushColor,\n            type: activeTool,\n          }\n        : {\n            x: currentPosition.x,\n            y: currentPosition.y,\n            size: 50,\n            type: activeTool,\n          };\n    drawnStokesRef.current.push(stroke);\n  };\n\n  const handleMouseUp = () => {\n    isDrawingRef.current = false;\n  };\n\n  const handleCanvasClear = () => {\n    drawnStokesRef.current = [];\n    initCanvas();\n  };\n\n  return (\n    <>\n      <AppBar\n        activeTool={activeTool}\n        backgroundColor={backgroundColor}\n        brushColor={brushColor}\n        brushSize={brushSize}\n        onBackgroundColorChange={setBackgroundColor}\n        onBrushColorChange={setBrushColor}\n        onToolSelect={setActiveTool}\n        onBrushSizeChange={setBrushSize}\n        onCanvasClear={handleCanvasClear}\n      />\n      <Canvas\n        ref={canvasRef}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n      />\n      <MobileMessage>Please use application on larger screen</MobileMessage>\n    </>\n  );\n};\n","export * from \"./app-bar\";\nexport { PaintCloneContainer as default } from \"./paint-clone-container\";\n"]}