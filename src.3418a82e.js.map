{"version":3,"sources":["../../quote-generator/src/quote.tsx","../../quote-generator/src/quote-container.tsx","../../quote-generator/src/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAQa,OAAA,CAAA,KAAA,GAAwB,UAAC,EAAD,EAAmC;MAAhC,IAAI,GAAA,EAAA,CAAA;MAAE,MAAM,GAAA,EAAA,CAAA;MAAE,EAAA,GAAA,EAAA,CAAA;MAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,YAAA,CAAQ,CAAX,GAAW;AACpE,SACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,IAAA,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,IAAN,CADF,EAEE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,MAAN,CAFF,EAGE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE;AAA/B,GAAA,EAAoC,WAApC,CAHF,CADF;AETF,AFkBC,CAVY,WERb,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,OAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAAS,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,SAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,iBAAA,CAAA,cAAA;AAAc;AAAd,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADDT,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAM,OAAO,GAAG,UAAO,GAAP,EAAkB;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACpB,iBAAA,CAAA;AAAA;AAAA,YAAM,KAAK,CAAC,GAAD,CAAX,CAAA;;;AAAN,UAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN;AACN,iBAAA,CAAA;AAAA;AAAA,YAAO,GAAG,CAAC,IAAJ,EAAP,CAAA;;;GAFgC,CAAA;AAGjC,CAHD;;AAKA,IAAM,GAAG,GAAG,6BAAZ;;AAEa,OAAA,CAAA,cAAA,GAAqB,YAAA;AAC1B,MAAA,EAAA,GAAkC,KAAA,CAAA,OAAA,CAAmB,GAAnB,EAAwB,OAAxB,CAAlC;AAAA,MAAQ,MAAM,GAAA,EAAA,CAAA,IAAd;AAAA,MAAgB,KAAK,GAAA,EAAA,CAAA,KAArB;AAAA,MAAuB,MAAM,GAAA,EAAA,CAAA,MAA7B;;AAEN,MAAI,KAAJ,EAAW,OAAO,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,IAAA,EAAA,4BAAA,CAAP;AACX,MAAI,CAAC,MAAL,EAAa,OAAO,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,IAAA,EAAA,YAAA,CAAP;AACb,MAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB,OAAO,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,IAAA,EAAA,eAAA,CAAP;;AAEzB,MAAM,SAAS,GAAG,YAAA;AAChB,IAAA,MAAM,CAAC,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,QAAX,CAAA;AAAoB,KAA5B,EAA8B,KAA9B,CAAN;AACD,GAFD;;AAIA,SACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,OAAA,CAAA,KAAD,EAAM;AAAC,IAAA,IAAI,EAAE,MAAM,CAAC,CAAD,CAAN,CAAU,IAAjB;AAAuB,IAAA,MAAM,EAAE,MAAM,CAAC,CAAD,CAAN,CAAU,MAAzC;AAAiD,IAAA,KAAK,EAAE;AAAxD,GAAN,CADF;AAGD,CAdY","file":"src.3418a82e.js","sourceRoot":"../public","sourcesContent":["import React, { FC } from \"react\";\n\nexport interface QuoteProps {\n  text: string;\n  author: string;\n  onNew?: () => void;\n}\n\nexport const Quote: FC<QuoteProps> = ({ text, author, onNew = () => {} }) => {\n  return (\n    <>\n      <div>{text}</div>\n      <div>{author}</div>\n      <button type=\"button\" onClick={onNew}>\n        New Quote\n      </button>\n    </>\n  );\n};\n","import React, { FC } from \"react\";\nimport useSWR from \"swr\";\nimport { Quote } from \"./quote\";\n\nconst fetcher = async (url: string) => {\n  const res = await fetch(url);\n  return res.json();\n};\n\nconst url = \"https://type.fit/api/quotes\";\n\nexport const QuoteContainer: FC = () => {\n  const { data: quotes, error, mutate } = useSWR<ApiQuote[]>(url, fetcher);\n\n  if (error) return <>Oops! something went wrong</>;\n  if (!quotes) return <>loading...</>;\n  if (quotes.length === 0) return <>out of quotes</>;\n\n  const handleNew = () => {\n    mutate((q) => q.slice(1, Infinity), false);\n  };\n\n  return (\n    <Quote text={quotes[0].text} author={quotes[0].author} onNew={handleNew} />\n  );\n};\n\n// types\ninterface ApiQuote {\n  text: string;\n  author: string;\n}\n","export * from \"./quote\";\nexport { QuoteContainer as default } from \"./quote-container\";\n"]}