{"version":3,"sources":["../../music-player/src/progress-bar.tsx","../../music-player/src/utils.ts","../../music-player/src/music-player-container.tsx","../../music-player/src/index.tsx"],"names":[],"mappings":"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","file":"src.9e2392ac.js","sourceRoot":"../public","sourcesContent":["import React, { FC } from \"react\";\n\ninterface ProgressBarProps {\n  value: number;\n  onClick?: (value: number) => void;\n}\n\nexport const ProgressBar: FC<ProgressBarProps> = (props) => {\n  const { value, onClick } = props;\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!onClick) return;\n    const width = e.currentTarget.offsetWidth;\n    const clickX = e.nativeEvent.offsetX;\n    onClick(clickX / width);\n  };\n\n  return (\n    <div\n      style={{\n        height: 20,\n        cursor: \"pointer\",\n        border: \"1px solid black\",\n      }}\n      onClick={handleClick}\n      role=\"progressbar\"\n    >\n      <div\n        style={{\n          width: `${value * 100}%`,\n          height: \"100%\",\n          backgroundColor: \"black\",\n        }}\n      />\n    </div>\n  );\n};\n","const zeroPad = (number: number) => {\n  const numberString = `${Math.floor(number)}`;\n  return `0${numberString}`.slice(-2);\n};\n\nexport const secondsToTime = (totalSeconds: number) => {\n  const displaySeconds = totalSeconds % 60;\n  const totalMinutes = (totalSeconds - displaySeconds) / 60;\n  const displayMinutes = totalMinutes % 60;\n  return `${zeroPad(displayMinutes)}:${zeroPad(displaySeconds)}`;\n};\n","import React, { FC, useState, useRef, useEffect, SyntheticEvent } from \"react\";\nimport cantYouSee from \"./assets/cant-you-see.mp3\";\nimport holidayBlues from \"./assets/holiday-blues.mp3\";\nimport strawberry from \"./assets/strawberry.mp3\";\nimport { ProgressBar } from \"./progress-bar\";\nimport { secondsToTime } from \"./utils\";\n\nconst MUSICS = [\n  {\n    src: cantYouSee,\n    name: \"Can't you see\",\n    author: \"Dyalla\",\n    credit: \"Can't you see by Dyalla\",\n    url: \"https://soundcloud.com/dyallas/cant-you-see\",\n  },\n  {\n    src: holidayBlues,\n    name: \"Holiday blues\",\n    author: \"Joakim Karud\",\n    credit: \"Holiday blues by Joakim Karud\",\n    url: \"https://soundcloud.com/joakimkarud/holiday-blues\",\n  },\n  {\n    src: strawberry,\n    name: \"Strawberry\",\n    author: \"Jeff Kaale\",\n    credit: \"Strawberry by Jeff Kaale\",\n    url: \"https://soundcloud.com/jeff-kaale/strawberry\",\n  },\n];\n\nexport const MusicPlayerContainer: FC = () => {\n  const [musicIndex, setMusicIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progressValue, setProgressValue] = useState(0);\n  const [duration, setDuration] = useState<number>(0);\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const musicRef = useRef<HTMLAudioElement>(null);\n\n  const { src, name, author, url } = MUSICS[musicIndex];\n  const totalMusicCount = MUSICS.length;\n\n  useEffect(() => {\n    setProgressValue(0);\n    if (isPlaying) musicRef.current?.play();\n  }, [musicIndex]);\n\n  const handlePrevious = () => {\n    if (musicIndex === 0) return;\n    setMusicIndex(musicIndex - 1);\n  };\n\n  const handleNext = () => {\n    const lastIndex = totalMusicCount - 1;\n    if (musicIndex === lastIndex) return;\n    setMusicIndex(musicIndex + 1);\n  };\n\n  const handlePause = () => {\n    musicRef.current?.pause();\n    setIsPlaying(false);\n  };\n\n  const handlePlay = () => {\n    musicRef.current?.play();\n    setIsPlaying(true);\n  };\n\n  const handleTimeUpdate = (e: SyntheticEvent<HTMLAudioElement, Event>) => {\n    if (!isPlaying) return;\n    const target = e.currentTarget;\n    setProgressValue(target.currentTime / target.duration);\n    setCurrentTime(target.currentTime);\n  };\n\n  const handleProgressBarClick = (value: number) => {\n    setProgressValue(value);\n    const musicEl = musicRef.current!;\n    musicEl.currentTime = value * musicEl.duration;\n    setCurrentTime(musicEl.currentTime);\n  };\n\n  const handleDurationChange = (e: SyntheticEvent<HTMLAudioElement, Event>) => {\n    setDuration(e.currentTarget.duration);\n  };\n  return (\n    <>\n      <div>{name}</div>\n      <div>by {author}</div>\n      <a href={url} target=\"_blank\" rel=\"noreferrer\">\n        link to original music\n      </a>\n      <ProgressBar value={progressValue} onClick={handleProgressBarClick} />\n      <div>\n        <span>{secondsToTime(currentTime)}</span>/\n        <span>{secondsToTime(duration)}</span>\n      </div>\n      <button type=\"button\" onClick={handlePrevious}>\n        previous\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => (isPlaying ? handlePause() : handlePlay())}\n      >\n        {isPlaying ? \"pause\" : \"play\"}\n      </button>\n      <button type=\"button\" onClick={handleNext}>\n        next\n      </button>\n      <audio\n        src={src}\n        ref={musicRef}\n        onEnded={handleNext}\n        onTimeUpdate={handleTimeUpdate}\n        onDurationChange={handleDurationChange}\n      />\n      <div>\n        {musicIndex + 1}/{totalMusicCount}\n      </div>\n    </>\n  );\n};\n","export { MusicPlayerContainer as default } from \"./music-player-container\";\n"]}