{"version":3,"sources":["../../quote-generator/src/quote.tsx","../../quote-generator/src/quote-container.tsx","../../quote-generator/src/index.tsx"],"names":[],"mappings":"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","file":"src.e8e1bc76.js","sourceRoot":"../public","sourcesContent":["import React, { FC } from \"react\";\n\nexport interface QuoteProps {\n  text: string;\n  author: string;\n  onNew?: () => void;\n}\n\nexport const Quote: FC<QuoteProps> = ({ text, author, onNew = () => {} }) => {\n  return (\n    <>\n      <div>{text}</div>\n      <div>{author}</div>\n      <button type=\"button\" onClick={onNew}>\n        New Quote\n      </button>\n    </>\n  );\n};\n","import React, { FC } from \"react\";\nimport useSWR from \"swr\";\nimport { Quote } from \"./quote\";\n\nconst fetcher = async (url: string) => {\n  const res = await fetch(url);\n  return res.json();\n};\n\nconst url = \"https://type.fit/api/quotes\";\n\nexport const QuoteContainer: FC = () => {\n  const { data: quotes, error, mutate } = useSWR<ApiQuote[]>(url, fetcher);\n\n  if (error) return <>Oops! something went wrong</>;\n  if (!quotes) return <>loading...</>;\n  if (quotes.length === 0) return <>out of quotes</>;\n\n  const handleNew = () => {\n    mutate((q) => q.slice(1, Infinity), false);\n  };\n\n  return (\n    <Quote text={quotes[0].text} author={quotes[0].author} onNew={handleNew} />\n  );\n};\n\n// types\ninterface ApiQuote {\n  text: string;\n  author: string;\n}\n","export * from \"./quote\";\nexport { QuoteContainer as default } from \"./quote-container\";\n"]}