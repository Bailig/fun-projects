{"version":3,"sources":["../../joke-teller/src/config.ts","../../joke-teller/src/joke-teller-container.tsx","../../joke-teller/src/index.tsx"],"names":[],"mappings":"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","file":"src.f9b5d0ca.js","sourceRoot":"../public","sourcesContent":["// TODO: create a server that makes the request with the api key. the api key should not be stored in front end\nexport const { TEXT_TO_SPEECH_API_KEY } = process.env;\n","import React, { FC, useRef } from \"react\";\nimport useSWR from \"swr\";\nimport { TEXT_TO_SPEECH_API_KEY } from \"./config\";\n\nconst fetchText = async (...args: Parameters<typeof fetch>) => {\n  const response = await fetch(...args);\n  return response.text();\n};\nconst fetchJSON = async (...args: Parameters<typeof fetch>) => {\n  const response = await fetch(...args);\n  return response.json();\n};\n\nconst options = {\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false,\n};\n\nexport const JokeTellerContainer: FC = () => {\n  const { data: joke, mutate } = useSWR<ApiJoke>(\n    \"https://sv443.net/jokeapi/v2/joke/Programming?blacklistFlags=nsfw,racist,sexist\",\n    fetchJSON,\n    options,\n  );\n\n  const jokeString = (() => {\n    if (!joke) return;\n    if (\"setup\" in joke) return `${joke.setup} ${joke.delivery}`;\n    return joke.joke;\n  })();\n\n  const { data: jokeAudio } = useSWR<string>(\n    jokeString\n      ? `https://api.voicerss.org/?key=${TEXT_TO_SPEECH_API_KEY}&hl=en-us&c=MP3&b64=true&src=${jokeString}`\n      : null,\n    fetchText,\n    options,\n  );\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  if (!jokeAudio || !joke) return <>loading...</>;\n\n  const handleClick = () => {\n    audioRef.current?.play();\n  };\n\n  const handleEnded = () => mutate();\n\n  return (\n    <>\n      <button type=\"button\" onClick={handleClick}>\n        Tell me a joke\n      </button>\n      <audio ref={audioRef} src={jokeAudio} onEnded={handleEnded} />\n    </>\n  );\n};\n\n// types\nexport type ApiJoke =\n  | {\n      setup: string;\n      delivery: string;\n\n      id: number;\n    }\n  | {\n      id: number;\n      joke: string;\n    };\n","export { JokeTellerContainer as default } from \"./joke-teller-container\";\n"]}